int lengthOfLongestSubstring(string s) {
        // Map to store the last seen index of each character
        unordered_map<char, int> charIndexMap;
        int maxLength = 0;  // To store the maximum length found
        int start = 0;      // The starting index of the current substring
        
        for (int end = 0; end < s.length(); end++) {
            // If the character is in the map and within the current window
            if (charIndexMap.find(s[end]) != charIndexMap.end() && charIndexMap[s[end]] >= start) {
                // Move the start pointer past the last occurrence of this character
                start = charIndexMap[s[end]] + 1;
            }
            
            // Update the last seen index of the character
            charIndexMap[s[end]] = end;
            
            // Calculate the current substring length and update the maximum length
            maxLength = max(maxLength, end - start + 1);
        }
        
        return maxLength;  // Return the length of the longest substring
    }
};


class Solution {
    public int lengthOfLongestSubstring(String s) {
        int n = s.length();
        int maxLength = 0;
        int[] lastIndex = new int[128];
        
        for (int start = 0, end = 0; end < n; end++) {
            char currentChar = s.charAt(end);
            start = Math.max(start, lastIndex[currentChar]);
            maxLength = Math.max(maxLength, end - start + 1);
            lastIndex[currentChar] = end + 1;
        }
        
        return maxLength;
    }
}

